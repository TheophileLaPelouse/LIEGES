# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Cycle
                                 A QGIS plugin
 This plugins helps hydraulics engineers to quantify the emission in any given project. It is compatible with Hydra and Expresseau.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-21
        copyright            : (C) 2024 by Setec Hydratec
        email                : theophile.mounier@setec.com
        git sha              : $Format:%H$
 ***************************************************************************/

 This script initializes the plugin, making it known to QGIS.
"""
import os 
import subprocess
import sys 
 
# Dans le doute on ajoute ce dossier au pythonpath
sys.path.append(os.path.dirname(__file__))

# ENVIRONMENTS
if 'PGSERVICEFILE' not in os.environ: # .pg_service.conf not set in environment
    os.environ['PGSERVICEFILE'] = os.path.join(os.path.expanduser('~'), ".pg_service.conf")
    
_cycle_dir = os.path.join(os.path.expanduser('~'), ".cycle")
_log_file = os.path.join(_cycle_dir, 'cycle.log')

if not os.path.exists(_cycle_dir):
    os.makedirs(_cycle_dir)
    
if not os.path.exists(_log_file):
    open(_log_file, 'w').close()
    
if 'PGSERVICEFILE' not in os.environ: # .pg_service.conf not set in environment
    os.environ['PGSERVICEFILE'] = os.path.join(os.path.expanduser('~'), ".pg_service.conf")

if os.name == 'nt' and subprocess.call("where pg_dump") == 1: # pgdump.exe not in path
    os.environ['PATH'] = os.environ['PATH'] + f";{os.path.join(os.path.dirname(__file__), 'bin')};"
elif os.name != 'nt' and subprocess.call("which pg_dump") == 1 : # pgdump not in path
    os.environ['PATH'] = os.environ['PATH'] + f":{os.path.join(os.path.dirname(__file__), 'bin')}"



def classFactory(iface):  # pylint: disable=invalid-name
    """Load Cycle class from file Cycle.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    #
    from .cycle import Cycle
    return Cycle(iface)
